server {
      listen 443 ssl http2; # 一定要写ssl
      server_name 120.25.153.46; # 你的域名 
      root html; # 前端页面的根目录
      index index.html index.htm;

    #开启和关闭gzip模式
      gzip on;
      
      #gizp压缩起点，文件大于1k才进行压缩
      gzip_min_length 1k;
      
      # gzip 压缩级别，1-9，数字越大压缩的越好，也越占用CPU时间
      gzip_comp_level 6;
      
      # 进行压缩的文件类型。
      gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/xml text/javascript application/json application/vnd.ms-fontobject font/ttf font/opentype font/x-woff image/svg+xml;
      
      #nginx对于静态文件的处理模块，开启后会寻找以.gz结尾的文件，直接返回，不会占用cpu进行压缩，如果找不到则不进行压缩
      # gzip_static on|off
      
      # 是否在http header中添加Vary: Accept-Encoding，建议开启
      gzip_vary on;

      # 设置压缩所需要的缓冲区大小，以4k为单位，如果文件为7k则申请2*4k的缓冲区 
      gzip_buffers 4 16k;

      # 设置gzip压缩针对的HTTP协议版本
      # gzip_http_version 1.1;

      ssl_certificate  /etc/nginx/cert/120.25.153.46.crt; # 证书文件名
      ssl_certificate_key /etc/nginx/cert/120.25.153.46.key; # 密钥文件名
      ssl_session_timeout 5m;
      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_prefer_server_ciphers on;

      # static cache

      location / {
        proxy_pass http://aggregate:7001; 
        proxy_ignore_headers X-Accel-Expires Expires Cache-Control Set-Cookie;
        index index.html index.htm;
      }
}
server {
      listen 80;
      server_name 120.25.153.46;# 你的域名
     
      rewrite ^(.*)$ https://$host$1; #将
}